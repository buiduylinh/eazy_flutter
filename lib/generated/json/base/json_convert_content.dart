// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:eazy_flutter/data/http/request/meetpeople_request.dart';
import 'package:eazy_flutter/generated/json/meetpeople_request_helper.dart';
import 'package:eazy_flutter/domain/model/meetpeople/meet_people.dart';
import 'package:eazy_flutter/generated/json/meet_people_helper.dart';
import 'package:eazy_flutter/data/model/entity_model.dart';
import 'package:eazy_flutter/generated/json/entity_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case MeetpeopleRequest:
			return meetpeopleRequestFromJson(data as MeetpeopleRequest, json) as T;			case MeetPeople:
			return meetPeopleFromJson(data as MeetPeople, json) as T;			case EntityModel:
			return entityModelFromJson(data as EntityModel, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case MeetpeopleRequest:
			return meetpeopleRequestToJson(data as MeetpeopleRequest);			case MeetPeople:
			return meetPeopleToJson(data as MeetPeople);			case EntityModel:
			return entityModelToJson(data as EntityModel);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'MeetpeopleRequest':
			return MeetpeopleRequest().fromJson(json);			case 'MeetPeople':
			return MeetPeople().fromJson(json);			case 'EntityModel':
			return EntityModel().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'MeetpeopleRequest':
			return List<MeetpeopleRequest>();			case 'MeetPeople':
			return List<MeetPeople>();			case 'EntityModel':
			return List<EntityModel>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}